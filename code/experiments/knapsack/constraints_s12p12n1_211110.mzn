int: n;
int: capacity;
array[1..5] of int:profit;
array[1..5] of int:size;
array[1..5] of var int:x;
constraint forall(a in 1..5)(n + -n <= x[a]);
constraint (sum(a in 1..5) (x[a]) + -capacity <= -n);
constraint (sum(a in 1..5) (x[a]) + -capacity <= n);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + -capacity <= -profit[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + -capacity <= -size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + -capacity <= size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (profit[a]) + -capacity <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + -capacity <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + -capacity <= -x[a]);
constraint forall(a in 1..5)(n + -capacity <= -x[a]);
constraint forall(a in 1..5)(capacity + -capacity <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + -capacity <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (profit[a]) + -capacity <= x[a]);
constraint forall(a in 1..5)(n + -capacity <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + -capacity <= x[a]);
constraint forall(a in 1..5)(x[a] + -profit[a] <= -n);
constraint (sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= -n);
constraint forall(a in 1..5)(x[a] + -profit[a] <= n);
constraint (sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= n);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= -profit[a]);
constraint forall(a in 1..5)(x[a] + -profit[a] <= -size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= -size[a]);
constraint forall(a in 1..5)(x[a] + -profit[a] <= size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= size[a]);
constraint forall(a in 1..5)(size[a] + -profit[a] <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + sum(a in 1..5) (-profit[a]) <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= -x[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-profit[a]) <= -x[a]);
constraint forall(a in 1..5)(size[a] + -profit[a] <= x[a]);
constraint forall(a in 1..5)(profit[a] + -profit[a] <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (profit[a]) + sum(a in 1..5) (-profit[a]) <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-profit[a]) <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + sum(a in 1..5) (-profit[a]) <= x[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-profit[a]) <= x[a]);
constraint (sum(a in 1..5) (x[a]) + sum(a in 1..5) (-size[a]) <= n);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-size[a]) <= size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-size[a]) <= -x[a]);
constraint forall(a in 1..5)(size[a] + -size[a] <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + sum(a in 1..5) (-size[a]) <= x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-size[a]) <= x[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-size[a]) <= x[a]);
constraint forall(a in 1..5)(x[a] + -x[a] <= n);
constraint (sum(a in 1..5) (size[a]) + sum(a in 1..5) (-x[a]) <= n);
constraint (sum(a in 1..5) (x[a]) + sum(a in 1..5) (-x[a]) <= n);
constraint (n+sum(a in 1..5) (x[a]) <= capacity);
constraint (sum(a in 1..5) (profit[a])+sum(a in 1..5) (x[a]) <= capacity);
constraint (sum(a in 1..5) (size[a])+sum(a in 1..5) (x[a]) <= capacity);
constraint (sum(a in 1..5) (x[a])+sum(a in 1..5) (x[a]) <= capacity);
constraint forall(a in 1..5)(size[a] + -x[a] <= capacity);
constraint forall(a in 1..5)(x[a] + -x[a] <= capacity);
constraint forall(a in 1..5)(profit[a] + -x[a] <= capacity);
constraint (sum(a in 1..5) (size[a]) + sum(a in 1..5) (-x[a]) <= capacity);
constraint (sum(a in 1..5) (profit[a]) + sum(a in 1..5) (-x[a]) <= capacity);
constraint (n + sum(a in 1..5) (-x[a]) <= capacity);
constraint (sum(a in 1..5) (x[a]) + sum(a in 1..5) (-x[a]) <= capacity);
constraint forall(a in 1..5)(n+sum(a in 1..5) (x[a]) <= profit[a]);
constraint forall(a in 1..5)(size[a]+x[a] <= profit[a]);
constraint forall(a in 1..5)(x[a] + -x[a] <= profit[a]);
constraint forall(a in 1..5)(size[a] + -x[a] <= profit[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + sum(a in 1..5) (-x[a]) <= profit[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-x[a]) <= profit[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-x[a]) <= profit[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-x[a]) <= -size[a]);
constraint forall(a in 1..5)(x[a] + -x[a] <= size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (size[a]) + sum(a in 1..5) (-x[a]) <= size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-x[a]) <= size[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-x[a]) <= size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-x[a]) <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (x[a]) + sum(a in 1..5) (-x[a]) <= x[a]);
constraint forall(a in 1..5)(n + sum(a in 1..5) (-x[a]) <= x[a]);
constraint forall(a in 1..5) ( 0 <= x[a]);
solve satisfy;