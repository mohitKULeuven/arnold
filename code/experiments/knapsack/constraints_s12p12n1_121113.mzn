int: n;
int: capacity;
array[1..5] of int:profit;
array[1..5] of int:size;
array[1..5] of var int:x;
constraint forall(a in 1..5)(-n*profit[a] <= -x[a]);
constraint forall(a in 1..5)(-n*x[a] <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-n*size[a]) <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-n*x[a]) <= -profit[a]);
constraint forall(a in 1..5)(-capacity <= -x[a]);
constraint forall(a in 1..5)(-capacity*x[a] <= -x[a]);
constraint (sum(a in 1..5) (-capacity*x[a]) <= -capacity);
constraint forall(a in 1..5)(sum(a in 1..5) (-capacity*x[a]) <= -profit[a]);
constraint forall(a in 1..5)(-profit[a]*profit[a] <= -x[a]);
constraint (sum(a in 1..5) (-profit[a]*x[a]) <= -n);
constraint forall(a in 1..5)(sum(a in 1..5) (-profit[a]*x[a]) <= -size[a]);
constraint forall(a in 1..5)(-profit[a]*size[a] <= -x[a]);
constraint forall(a in 1..5)(-profit[a]*x[a] <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-profit[a]*x[a]) <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-profit[a]) <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-profit[a]*x[a]) <= -profit[a]);
constraint (sum(a in 1..5) (-size[a]*x[a]) <= -n);
constraint forall(a in 1..5)(sum(a in 1..5) (-size[a]*x[a]) <= -size[a]);
constraint forall(a in 1..5)(-size[a]*size[a] <= -x[a]);
constraint (sum(a in 1..5) (-x[a]) <= -n);
constraint (sum(a in 1..5) (x[a]*x[a]) <= capacity);
constraint (sum(a in 1..5) (x[a]*size[a]) <= capacity);
constraint (sum(a in 1..5) (profit[a]*x[a]) <= capacity);
constraint (sum(a in 1..5) (x[a]*n) <= capacity);
constraint forall(a in 1..5)(sum(a in 1..5) (-size[a]*x[a]) <= -profit[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-x[a]) <= -size[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-x[a]*x[a]) <= -x[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-x[a]) <= -x[a]);
constraint (sum(a in 1..5) (-x[a]*x[a]) <= -n);
constraint forall(a in 1..5)(sum(a in 1..5) (-x[a]*x[a]) <= -profit[a]);
constraint forall(a in 1..5)(sum(a in 1..5) (-x[a]*x[a]) <= -size[a]);
constraint forall(a in 1..5)(-x[a]*x[a] <= -x[a]);
constraint forall(a in 1..5) ( 0 <= x[a]);
solve satisfy;